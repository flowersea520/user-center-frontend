# 这个Nginx配置文件提供了一个基本的Web服务器设置，它启用了gzip压缩以优化传输性能，服务静态文件，
# 并将所有路由请求映射到index.html（适用于单页面应用）。
# 这是一个常见的配置，特别适用于前端JavaScript应用的后端服务。
# server 块定义了Nginx对进入的HTTP请求 如何响应。这里只定义了一个server块，监听80端口（默认的HTTP端口）。
server {
    listen 80;

    # gzip config 这些行启用了gzip压缩，以减少传输到客户端的数据量。
    gzip on; # 启用gzip压缩。
    gzip_min_length 1k; #只对大于或等于1KB的响应启用gzip压缩。
    gzip_comp_level 9; # 设置压缩级别为9，这是最高的压缩级别（但也是最慢的）。
    # 定义哪些M响应类型的文件 应该被压缩。这里包括了文本、CSS、JavaScript、JSON和XML等类型。
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
#     在响应头中添加Vary: Accept-Encoding字段，告诉客户端响应的内容是根据Accept-Encoding请求头变化的。
    gzip_vary on;
    # 禁用对老版本的Internet Explorer浏览器的gzip压缩，因为这些浏览器有一些与gzip相关的已知问题。
    gzip_disable "MSIE [1-6]\.";
# 这定义了Nginx服务静态文件时的根目录。（由于我们的项目依赖都在docker容器中，所以我们在对应的dockerfile中设置了根目录）
# 我们这里用dockerfile容器中的根目录
# 所有静态文件请求（如HTML、CSS、图片等）都将从这个目录中提供。
    root /usr/share/nginx/html;
    include /etc/nginx/mime.types;
# 定义nginx接收请求到的URL如何响应 -- 响应到后端服务器）
# location块定义了如何响应特定的URL路径。
  #
  # location / {：这个块匹配所有路径，因为/是一个通配符，匹配任何URL。
  # try_files $uri /index.html;：这是一个指令，它告诉Nginx首先尝试提供 与请求的URI匹配的静态文件 -- root /usr/share/nginx/html;在这里找。
  # 如果文件不存在（$uri失败），则退回到提供/index.html文件。
  # 这通常用于单页面应用（SPA），其中所有路由都映射到index.html，
  # 然后由前端路由库（如React Router或Vue Router）处理。
    location / {
        try_files $uri /index.html;
    }

}
